/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package View.Chofer;

import Controller.AutoController;
import Controller.ChoferController;
import Model.Auto;
import Model.Chofer;


import javax.swing.*;
import java.util.List;

import static View.Index.mostrarPanel;

/**
 *
 * @author Compumar
 */
public class FormChofer extends javax.swing.JPanel {

    private ChoferController choferController = new ChoferController();
    private AutoController autoController = new AutoController();

    private boolean isUpdate = false; // Variable para indicar si es una actualización o creación de chofer
    private Chofer choferExistente; // Variable para almacenar el chofer a actualizar

    /**
     * Creates new form FormChofer
     */
    public FormChofer() {
        initComponents();

        refreshAutos();

    }


    public FormChofer(boolean isUpdate, Chofer chofer) {

        this.isUpdate = isUpdate;

        this.choferExistente = chofer;

        initComponents();

        refreshAutos();

    }

    private void refreshAutos() {
        //Llamo al choferController para obtener la lista de autos.
        List<Auto> autos = autoController.readAll();

        //Si es una actualizacion, selecciono el auto del chofer existente si es que tiene uno.
        if(this.isUpdate && !choferExistente.isAutoPropio()){
            inputAuto.addItem(choferExistente.getAutoAlquilado());
        }

        for (Auto auto : autos) {

            //Muestro los autos disponibles en el comboBox de autos.
            if(auto.isDisponible()){
                inputAuto.addItem(auto);
            }

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelNombre = new javax.swing.JLabel();
        inputNombre = new javax.swing.JTextField();
        labelDni = new javax.swing.JLabel();
        inputDni = new javax.swing.JTextField();
        labelCelular = new javax.swing.JLabel();
        inputCelular = new javax.swing.JTextField();
        labelValorKm = new javax.swing.JLabel();
        labelAuto = new javax.swing.JLabel();
        inputAuto = new javax.swing.JComboBox<>();
        btnFormChofer = new javax.swing.JButton();
        inputAutoPropio = new javax.swing.JCheckBox();

        setPreferredSize(new java.awt.Dimension(927, 590));

        labelNombre.setText("Nombre");

        inputNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputNombreActionPerformed(evt);
            }
        });

        labelDni.setText("DNI");

        inputDni.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputDniActionPerformed(evt);
            }
        });

        labelCelular.setText("Celular");

        inputCelular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputCelularActionPerformed(evt);
            }
        });

        labelValorKm.setText("¿Tiene auto propio? (check --> si)");

        labelAuto.setText("Autos disponibles para alquiler");

        inputAuto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputAutoActionPerformed(evt);
            }
        });

        btnFormChofer.setText("Crear Chofer");
        btnFormChofer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFormChoferActionPerformed(evt);
            }
        });

        inputAutoPropio.setText("Auto propio");

        //Cuando inicio el panel, si es una actualización, cambio el texto del botón a "Actualizar Chofer", si no, lo dejo como "Crear Chofer"
        if(this.isUpdate){

            btnFormChofer.setText("Actualizar Chofer");


            inputNombre.setText(choferExistente.getNombre());
            inputDni.setText(String.valueOf(choferExistente.getDni()));
            inputCelular.setText(String.valueOf(choferExistente.getCelular()));
            inputAutoPropio.setSelected(choferExistente.isAutoPropio());
            inputAuto.setSelectedItem(choferExistente.getAutoAlquilado());



        } else {

            btnFormChofer.setText("Crear Chofer");

        }

        inputAutoPropio.addActionListener(new java.awt.event.ActionListener() {
            //Si se selecciona el checkbox de auto propio, se deshabilita el combo de autos disponibles para alquiler.
            public void actionPerformed(java.awt.event.ActionEvent evt) {

                if (inputAutoPropio.isSelected()) {

                    inputAuto.removeAllItems();

                    inputAuto.setEnabled(false); // deshabilita el combo

                } else {

                    inputAuto.setEnabled(true); // vuelve a habilitar el combo

                    refreshAutos();             // carga autos disponibles

                }
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputNombre, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                    .addComponent(labelNombre, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelValorKm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(inputAutoPropio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(111, 111, 111)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inputDni, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                    .addComponent(labelDni, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(inputAuto, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelAuto, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(111, 111, 111)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnFormChofer, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
                    .addComponent(labelCelular, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(inputCelular, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE))
                .addGap(37, 37, 37))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelCelular, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelDni, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(inputNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(inputDni, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(inputCelular, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(70, 70, 70)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelValorKm, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE)
                    .addComponent(labelAuto, javax.swing.GroupLayout.DEFAULT_SIZE, 37, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputAutoPropio, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(inputAuto, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(119, 119, 119)
                .addComponent(btnFormChofer, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(145, 145, 145))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void inputNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputNombreActionPerformed

    }//GEN-LAST:event_inputNombreActionPerformed

    private void inputDniActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputDniActionPerformed

    }//GEN-LAST:event_inputDniActionPerformed

    private void inputCelularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputCelularActionPerformed

    }//GEN-LAST:event_inputCelularActionPerformed

    private void inputAutoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputAutoActionPerformed

    }//GEN-LAST:event_inputAutoActionPerformed

    private void btnFormChoferActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFormChoferActionPerformed
        String nombre = inputNombre.getText();
        String dniStr = inputDni.getText();
        String celularStr = inputCelular.getText();
        Boolean autoPropio = inputAutoPropio.isSelected();
        Auto auto = (Auto) inputAuto.getSelectedItem();

        // Valido que no haya campos vacíos
        if (nombre.isEmpty() || dniStr.isEmpty() || celularStr.isEmpty() || (auto == null && !autoPropio)) {
            JOptionPane.showMessageDialog(this, "Por favor, complete todos los campos.");
            return;
        }

        // Valido que el dni y el celular sean números válidos
        int dni;
        long celular;
        try {
            dni = Integer.parseInt(dniStr);
            celular = Long.parseLong(celularStr);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "El DNI y el celular deben ser números válidos.");
            return;
        }

        // Valido que el dni y el celular sean mayores a 0

        if (dni <= 0 || celular <= 0) {
            JOptionPane.showMessageDialog(this, "El dni y el celular deben ser mayores a 0.");
            return;
        }

        if(this.isUpdate){


            //Antes de actualizar, en caso de que el chofer pase de no tener auto a tener auto propio, debo actualizar el auto a disponible, antes de que pase a null.
            //Esto no lo realice en el service de chofer como en caso de una edicion, porque al enviar los datos, perdia el auto porque pasa a ser null.
            if(autoPropio && !choferExistente.isAutoPropio()){

                Auto autoPreAsignado = choferExistente.getAutoAlquilado();

                autoPreAsignado.setDisponible(true);

                autoController.update(autoPreAsignado); // Actualizo el auto preasignado a disponible

            }

            // Si es una actualización, modifico el chofer existente

            choferExistente.setNombre(nombre);
            choferExistente.setDni(dni);
            choferExistente.setCelular(celular);
            choferExistente.setAutoPropio(autoPropio);
            choferExistente.setAutoAlquilado(auto);


            choferController.update(choferExistente);

        }else{

            choferController.create(new Chofer(nombre, dni, celular, autoPropio, true, auto));
        }


        mostrarPanel(new ListadoChofer());

    }//GEN-LAST:event_btnFormChoferActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFormChofer;
    private javax.swing.JComboBox<Auto> inputAuto;
    private javax.swing.JCheckBox inputAutoPropio;
    private javax.swing.JTextField inputCelular;
    private javax.swing.JTextField inputDni;
    private javax.swing.JTextField inputNombre;
    private javax.swing.JLabel labelAuto;
    private javax.swing.JLabel labelCelular;
    private javax.swing.JLabel labelDni;
    private javax.swing.JLabel labelNombre;
    private javax.swing.JLabel labelValorKm;
    // End of variables declaration//GEN-END:variables
}
